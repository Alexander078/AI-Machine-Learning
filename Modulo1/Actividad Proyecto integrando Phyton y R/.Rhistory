ggplot(cars, aes(x = cat)) + geom_bar())
ggplot(cars, aes(x = cat)) + geom_bar()
library("ggplot2", lib.loc="~/R/win-library/4.1")
ggplot(cars, aes(x = cat)) + geom_bar()
ggplot(cars) + geom_bar()
ggplot2(cars) + geom_bar()
mi_factorial <- function(x){
if(is.numeric(x)){
return(prod(1:x))  }
}
mi_factorial(5)
mi_factorial("a")
x <- c(1:10)
ifelse(x %% 2 == 0, "Es un Número PAR", "Es un Número IMPAR")
ifelse(x %% 2 == 0, "Es un Número PAR", "Es un Número IMPAR")
ifelse(x %% 2 == 0, "Es un Número PAR", "Es un Número IMPAR")
mi_factorial <- function(x){
if(is.numeric(x)){
return (prod(1:x))}
else{
print("El valor no es un numero")}
}
mi_factorial(5)
mi_factorial("d")
for (k in 1:5){  print(1:k)  }
i <- 1
while(i < 10){
ifelse(i %% 2 == 0, print("Es un Número PAR"), print("Es un Número IMPAR"))
i <- i + 1
}
x<-1
repeat{
print(x)
x=x+1
if(x==6){
break
}
}
cars
dim(cars)
length(cars)
names(cars)
head(cars)
tail(cars)
cars$speed
cars$dist
table(cars$speed)
barplot(table(cars$speed), main = "Frecuencia de las velocidades")
barplot(cars, main = "Frecuencia de las velocidades")
barplot(cars$speed, main = "Frecuencia de las velocidades")
barplot(table(cars$speed), main = "Frecuencia de las velocidades")
barplot(table(cars$dist), main = "Frecuencia de las Distancias")
par(mfrow=c(1,2))
barplot(table(cars$speed), main = "Frecuencia de las velocidades")
barplot(table(cars$dist), main = "Frecuencia de las Distancias")
par(mfrow=c(1,2))
barplot(table(cars$speed), main = "Frecuencia de las velocidades")
barplot(table(cars$dist), main = "Frecuencia de las Distancias")
par(mfrow=c(2,1))
barplot(table(cars$speed), main = "Frecuencia de las velocidades")
barplot(table(cars$dist), main = "Frecuencia de las Distancias")
par(mfrow=c(1, 1))
barplot(sample(5:10, 8, replace = TRUE), col = 1:8, names.arg = 1:8)
colors()
barplot(sample(5:10, 8, replace = TRUE), col = colors(), names.arg = 1:8)
barplot(sample(5:10, 657, replace = TRUE), col = colors(), names.arg = 1:657)
barplot(sample(1:657, 657, replace = TRUE), col = colors(), names.arg = 1:657)
barplot(sample(5:10, 8, replace = TRUE), col = colors(), names.arg = 1:8)
barplot(sample(5:10, 8, replace = TRUE), col = 1:8, names.arg = 1:8)
barplot(sample(5:10, 8, replace = TRUE), col = colors(134), names.arg = 1:8)
barplot(sample(5:10, 8, replace = TRUE), col = colors(134), names.arg = 1:8)
barplot(sample(5:10, 8, replace = TRUE), col = colors(chartreuse), names.arg = 1:8)
barplot(sample(5:10, 8, replace = TRUE), colors(chartreuse), names.arg = 1:8)
barplot(sample(5:10, 8, replace = TRUE), colors("chartreuse"), names.arg = 1:8)
barplot(sample(5:10, 8, replace = TRUE), colors('chartreuse'), names.arg = 1:8)
barplot(sample(5:10, 8, replace = TRUE), col = colors("chartreuse"), names.arg = 1:8)
barplot(sample(5:10, 8, replace = TRUE), col = colors()[368:374], names.arg = 1:8)
barplot(sample(5:10, 8, replace = TRUE), col = 8, names.arg = 1:8)
barplot(sample(5:10, 8, replace = TRUE), col = 1, names.arg = 1:8)
barplot(sample(5:10, 8, replace = TRUE), col = 4, names.arg = 1:8)
barplot(sample(5:10, 8, replace = TRUE), col = colors()[556:574], names.arg = 1:8)
barplot(sample(5:10, 8, replace = TRUE), col = 1:8, names.arg = 1:8)
barplot(sample(5:10, 8, replace = TRUE), col = color()[134], names.arg = 1:8)
barplot(sample(5:10, 8, replace = TRUE), col = colors()[134], names.arg = 1:8)
barplot(sample(5:10, 8, replace = TRUE), col = colors()[368:374], names.arg = 1:8)
par(mfrow=c(1, 1))
barplot(sample(5:10, 4, replace = TRUE), col = "firebrick1",density=c(5,10,20,40) , angle=c(0,45,90,135), names.arg = 1:4)
par(mfrow=c(1, 2))
set.seed(1961)
barplot(sample(5:10, 4, replace = TRUE), col = "firebrick1", names.arg = 1:4)
set.seed(1961)
barplot(sample(5:10, 4, replace = TRUE), col = "firebrick1", names.arg = 1:4,xlab = "Posición del elemento en la serie", ylab = "Valores que toma la serie", ylim=c(0,20))
par(mfrow=c(1, 2))
set.seed(1961)
barplot(sample(5:10, 4, replace = TRUE), col = "firebrick1", names.arg = 1:4)
set.seed(1961)
barplot(sample(5:10, 4, replace = TRUE), col = "firebrick1", names.arg = 1:4,width = c(0.10, 0.15, 0.20, 0.40), space = c(0.20, 0.40, 0.80, 1.20))
x=seq(0,1000, by=0)
x=1:1000
x[1:1000]=0
x
x= rnorm(1000, 32,5)
x
for(j in 1:1000){
y[j] <- 0}
y
y <- for(j in 1:1000){
y[j]<- 0}
y=1:1000
for(j in 1:1000){
y[j] <- 0}
set.seed(1961)
y = ts(rnorm(1000, mean = 32, sd = 5))
help(ts)
hist(y, breaks = 50, freq = FALSE,  main="Histograma",ylab="Frecuencia Relativa", xlab="Amplitud de la Serie")
par(mfrow=c(1, 2))
hist(y, breaks = 50, freq = FALSE,  main="Histograma",ylab="Frecuencia Relativa", xlab="Amplitud de la Serie", col="purple")
hist(y, breaks = 50, freq = FALSE,  main="Histograma",ylab="Frecuencia Relativa", xlab="Amplitud de la Serie", col = terrain.colors(15))
y = ts(rnorm(1000, mean = 20, sd = 5))
if (!require("RColorBrewer")) {
install.packages("RColorBrewer")
library(RColorBrewer)}
set.seed(2022)
y = ts(rnorm(1000, mean = 20, sd = 5))
hist(y, breaks = 100, freq = FALSE,     main="Histograma de la serie generada",     ylab="Frecuencia Relativa",     xlab="Valor de la Serie",     col=brewer.pal(8,"Set3"))
par(mfrow=c(1, 1))
hist(y, breaks = 100, freq = FALSE,     main="Histograma de la serie generada",     ylab="Frecuencia Relativa",     xlab="Valor de la Serie",     col=brewer.pal(8,"Set3"))
hist(y, breaks = 200, freq = FALSE,     main="Histograma de la serie generada",     ylab="Frecuencia Relativa",     xlab="Valor de la Serie",     col=brewer.pal(8,"Set3"))
hist(y, breaks = 100, freq = FALSE,     main="Histograma de la serie generada",     ylab="Frecuencia Relativa",     xlab="Valor de la Serie",     col=brewer.pal(8,"Set3"))
hist(y, breaks = 50, freq = FALSE,     main="Histograma de la serie generada",     ylab="Frecuencia Relativa",     xlab="Valor de la Serie",     col=brewer.pal(8,"Set3"))
display.brewer.all(colorblindFriendly = TRUE)
ggp <- ggplot(data, aes(x, y, col = factor(x))) +  # Create default ggplot2 plot
geom_point(size = 10)
library("ggplot2", lib.loc="~/R/win-library/4.1")
ggp <- ggplot(data, aes(x, y, col = factor(x))) +  # Create default ggplot2 plot
geom_point(size = 10)
ggp <- ggplot(data, aes(x, y, col = factor(x))) +
geom_point(size = 10)
for(j in 1:1000){
y[j] <- 0}
set.seed(1961)
y = ts(rnorm(1000, mean = 32, sd = 5))
par(mfrow=c(1, 2))
hist(y, breaks = 10, freq = FALSE,  main="Histograma", ylab="Frecuencia Relativa", xlab="Amplitud de la Serie", col="purple", border = "yellow")
hist(y, breaks = 10, freq = FALSE,  main="Histograma", ylab="Frecuencia Relativa", xlab="Amplitud de la Serie", col = "purple", border ="purple")
for(j in 1:1000){
y[j] <- 0}
set.seed(1961)
y = ts(rnorm(1000, mean = 32, sd = 5))
par(mfrow=c(1, 2))
hist(y, breaks = 10, freq = FALSE,  main="Histograma", ylab="Frecuencia Relativa", xlab="Amplitud de la Serie", col = "purple", ylim=c(0,0.10))
lines(density(y), col="red")
curve(dnorm(x, mean(y), sd(y)), col = "blue", add = T)
legend("topright", c("Histograma", "Densidad", "Normal"), box.lty = 0, lty = 1, col = c("purple", "red", "blue"), lwd = c(1, 2, 2))
iris
plot(iris$Sepal.Length)
par(mfrow=c(1, 1))
plot(iris$Sepal.Length)
plot(iris$Sepal.Length, pch=25)
plot(iris$Petal.Length,       pch=24, cex=0.75,      col="dimgrey", bg="red",      main="Longitud de los pétalos del objeto iris",      ylab="Longitud del Pétalo", xlab="Índice",      ylim = c(0,8))
plot(iris$Petal.Length, iris$Sepal.Length,  main="Longitud de los pétalos y sépalos del objeto iris",ylab="Longitud del Pétalo", xlab="Longitud del Sépalo")
x <- iris$Petal.Length
y <- iris$Sepal.Length
c <- cut(x, breaks=4)
plot(x, y, col = c, main="Longitud de los pétalos y sépalos del objeto iris", ylab="Longitud del Sépalo", xlab="Longitud del Pétalo")
c <- cut(x, breaks=5)
plot(x, y, col = c, main="Longitud de los pétalos y sépalos del objeto iris", ylab="Longitud del Sépalo", xlab="Longitud del Pétalo")
c <- cut(x, breaks=6)
plot(x, y, col = c, main="Longitud de los pétalos y sépalos del objeto iris", ylab="Longitud del Sépalo", xlab="Longitud del Pétalo")
x <- iris$Petal.Length
y <- iris$Sepal.Length
plot(x, y, col = iris$Specie, main="Longitud de los pétalos y sépalos del objeto iris",ylab="Longitud del Sépalo", xlab="Longitud del Pétalo")
legend(x = "bottomright", legend = c("Setosa", "Versicolor", "Virginica"), fill = c("black", "red", "green"), title = "Especie")
plot(x, y, col = iris$Specie, main="Longitud de los pétalos y sépalos del objeto iris",ylab="Longitud del Sépalo", xlab="Longitud del Pétalo", type='b')
plot(x, y, col = iris$Specie, main="Longitud de los pétalos y sépalos del objeto iris",ylab="Longitud del Sépalo", xlab="Longitud del Pétalo", type='o')
grid(lwd = 1, lty = 2)
for(j in 1:10){
x[j] <- 0}
set.seed(1961)
x = ts(rnorm(10, mean = 32, sd = 5))
par(mfrow=c(1, 2))
plot(sort(x), ylab=" ", xlab=" ")
grid(lwd = 3, lty = 1)
plot(sort(x), ylab=" ", xlab=" ")
grid(lwd = 1, lty = 2)
for(j in 1:10){
x[j] <- 0}
set.seed(1961)
x = ts(rnorm(10, mean = 32, sd = 5))
par(mfrow=c(1, 2))
plot(sort(x), ylab=" ", xlab=" ", panel.first = grid(lwd = 1, lty = 3))
plot(sort(x), ylab=" ", xlab=" ", panel.first = grid(lwd = 1, lty = 4))
for(j in 1:10){
x[j] <- 0}
set.seed(1961)
x = ts(rnorm(10, mean = 32, sd = 5))
plot(sort(x), ylab=" ", xlab=" ", panel.first = grid(lwd = 1, lty = 3))
abline(v = 4.5, lty = 1, col="blue")
abline(h = 33.5, lty = 2, col="red")
summary(cars)
boxplot(cars$speed, main="Speed - Cars")
par(mfrow=c(1, 1))
boxplot(cars$speed, main="Speed - Cars")
x <- c(13, 5, 27, 32, 21)
x_porcentaje <- round(x/sum(x) * 100,2)
pie(x_porcentaje)
pie(x_porcentaje, radius = 0.5, main = "radius = 0.5")
pie(x_porcentaje, radius = 0.8, main = "radius = 0.8")
pie(x_porcentaje, radius = 1.0, main = "radius = 1.0")
pie(x_porcentaje, radius = -1.0, main = "radius = -1.0")
pie(x_porcentaje, radius = 1.0, main = "radius = 1.0")
pie(x_porcentaje, radius = 1.0, clockwise =  TRUE, main = "clockwise = TRUE")
pie(x_porcentaje, radius = 1.0, clockwise =  FALSE, main = "clockwise = FALSE")
pie(x_porcentaje, radius = 1.0, labels = c("Uno", "Dos", "Tres", "Cuatro", "Cinco"))
library("RColorBrewer", lib.loc="~/R/win-library/4.1")
color <- brewer.pal(length(x), "Set2")
pie(x_porcentaje, radius = 1.0, col = color)
pie(x_porcentaje, radius = 1.0, col = color, border = color)
for(j in 1:10){
x[j] <- 0}
set.seed(1961)
x <- ts(rnorm(10, mean = 32, sd = 5))
jpeg(filename = "Ejemplo1.jpg", width = 800, height = 600)
plot(sort(x), ylab=" ", xlab=" ", panel.first = grid(lwd = 1, lty = 3))
abline(v = 4.5, lty = 1, col="blue")
abline(h = 33.5, lty = 2, col="red")
dev.off()
for(j in 1:10){
x[j] <- 0}
set.seed(1961)
jpeg(filename = "Ejemplo2.png", width = 400, height = 300)
plot(sort(x), ylab=" ", xlab=" ", panel.first = grid(lwd = 1, lty = 3))
abline(v = 4.5, lty = 1, col="blue")
abline(h = 33.5, lty = 2, col="red")
dev.off()
sleep
remove.packages("ggplot2")
install.packages(“ggplot2”)
install.packages("ggplot2")
library(ggplot2)
x<-1:10
x<-[x==5]
x[x==5]
x[x==5]
manual(ls)
manual("ls")
x = 13
y = 3
z = 20
y*(z-x)
mtcars
help("mtcars")
barplot(mtcars$am)
barplot(table(mtcars$am))
table(mtcars$am)
set.seed(2022)
r<-rnorm(1000,54,3.2)
r
min(r)
which.min(r)
r[459]
a <- [0:100]
a <- 1:100
sum(a)
x <- c(2, 4, 6, 8)
y <- media(x)
print(y)
x <- c(2, 4, 6, 8)
y <- media(x)
print(y)
cls
clear()
del
del()
clc
media <- function(x){  suma <- sum(x)  return(suma/length(x))}
media <- function(x){
suma <- sum(x)
return(suma/length(x))}
x <- c(2, 4, 6, 8)
y <- media(x)
print(y)
my_name <- readline(prompt="Ingrese su nombre: ")
my_age  <- readline(prompt="Ingrese su edad en años: ")
my_age  <- as.integer(my_age) # convert character into integer
print(paste("Hola,", my_name,
"el año siguiente usted tendra",
my_age + 1,
"años de edad."))
my_name <- readline(prompt="Ingrese su nombre: ")
my_age  <- as.integer(my_age) # convert character into integer
print(paste("Hola,", my_name,
"el año siguiente usted tendra",
my_age + 1,
"años de edad."))
q()
q()
a=1
a=a+2
a=1
a=a+2
a
a=1
a=a+2
a
setwd("~/")
a <- 3
a <- 3
a <- 3
b <- 5
a+b
c <- a+b
sqrt(c)
a <- c(1,2,3)
b <- c(4,5,6)
a+b
x <- c(a,b)
x
a <- c(1,2,3)
y <- c(2,2,2,2)
# ejecute: a+y, le mostrará un mensaje de alerta
a+y
a <- c(1,2,3)
y <- c(2,2,2,2)
# ejecute: a+y, le mostrará un mensaje de alerta
a+y
length(a)
length(y)
x <- 1:10
x <- c(1:10)
x <- 1:10
x
x <- c(1:10)
x
x <- seq(from=1,to = 10,by = 2)
x
x <- rep(x = 1, times=5)
x
y
y <- rep(x = "A", times=5)
y <- rep(x = "A", times=5)
y
x <- rep(c(1,2,3),3)
x
y <- rep(c("a","b","c"),3)
y
x <- sample(x = 1:30, size = 5, replace = F)
x
# Importando librerias a utilizar
library(reticulate)
library(ggplot2)
library(glmnet)
library(tidymodels)
library(caret)
library(pROC)
library(rsample)
library(dplyr)
# Usar reticulate para cargar pandas
py_run_string("import pandas as pd")
# Cargar los datos en un dataframe de pandas
py_run_string("
import pandas as pd
df_vehiculos = pd.read_csv('cars.csv')
")
setwd("C:/Users/will_/OneDrive/Desktop/AI MACHINE LEARNING/Modulo 1/Actividades/Modulo1/Actividad Proyecto integrando Phyton y R")
# Importando librerias a utilizar
library(reticulate)
library(ggplot2)
library(glmnet)
library(tidymodels)
library(caret)
library(pROC)
library(rsample)
library(dplyr)
# Usar reticulate para cargar pandas
py_run_string("import pandas as pd")
# Cargar los datos en un dataframe de pandas
py_run_string("
import pandas as pd
df_vehiculos = pd.read_csv('cars.csv')
")
# Realizando cambio de tipos en Python a tipos correspondientes de categoria y string
py_run_string("
df_vehiculos['manufacturer_name'] = df_vehiculos['manufacturer_name'].astype('string')
df_vehiculos['model_name'] = df_vehiculos['model_name'].astype('string')
df_vehiculos['color'] = df_vehiculos['color'].astype('string')
df_vehiculos['engine_fuel'] = df_vehiculos['engine_fuel'].astype('string')
df_vehiculos['body_type'] = df_vehiculos['body_type'].astype('string')
df_vehiculos['location_region'] = df_vehiculos['location_region'].astype('string')
df_vehiculos['transmission'] = df_vehiculos['transmission'].astype('category')
df_vehiculos['engine_type'] = df_vehiculos['engine_type'].astype('category')
df_vehiculos['state'] = df_vehiculos['state'].astype('category')
df_vehiculos['drivetrain'] = df_vehiculos['drivetrain'].astype('category')
")
# Eliminar las filas con valor NA en python
py_run_string("
df_vehiculos = df_vehiculos.dropna()
")
# Eliminar las filas duplicadas en python
py_run_string("
df_vehiculos = df_vehiculos.drop_duplicates()
")
# 3. Tranferir los datos a R
df_r <- py$df_vehiculos
df_vehiculos <- as.data.frame(df_r)
# Visualizando los datos transferidos a R
head(df_vehiculos)
str(df_vehiculos)
# Verificando que no existen valores nulos en R, se realizo la limpieza de nulos previamente en python exitosamente
colSums(is.na(df_vehiculos))
#Verificando que no existen duplicados en R, se realizo la limpieza de duplicados previamente en python exitosamente
sum(duplicated(df_vehiculos))
# Visualizando los primeros cinco registros
head(df_vehiculos, 5)
# Conociendo las columnas del dataframe
colnames(df_vehiculos)
# Verificando las dimenciones del dataframe
dim(df_vehiculos)
# Verificando los tipos de datos de las columnas del Dataframe
# Se evidencia en el dataframe los tipos factor que fueron convertidos anteriormente en python
# transmission, engine_type, state, drivetrain
sapply(df_vehiculos, class)
# Obteniendo mas informacion datos del conjunto de datos
str(df_vehiculos)
# Medidas de tendencia central
summary(df_vehiculos)
# visualizando los años de produccion de los vehiculos
table(df_vehiculos$year_produced)
# Analizando un poco mas los vehiculos
print(paste("El precio promedio de los vehiculos es: ", mean(df_vehiculos$price_usd)))
print(paste("La mediana del precio de los vehiculos es: ", median(df_vehiculos$price_usd)))
print(paste("La moda del color de los vehiculos es: ", names(sort(-table(df_vehiculos$color)))[1]))
print(paste("La varianza del precio de los vehiculos es: ", var(df_vehiculos$price_usd)))
print(paste("La desviacion estandar del precio de los vehiculos es: ", sd(df_vehiculos$price_usd)))
print(paste("El rango de precio de los vehiculos es: ", max(df_vehiculos$price_usd) - min(df_vehiculos$price_usd)))
# el 75% de los precios se encuentra en este precio o debajo
print(paste("El tercer cuartil del precio de los vehiculos es: ", quantile(df_vehiculos$price_usd, 0.75)))
# utilizando paquetes como dplyr
# Agrupar por fabricante y calcular el precio promedio de los vehículos de cada fabricante
df_vehiculos %>%
group_by(manufacturer_name) %>%
summarise(mean_price = mean(price_usd)) %>%
arrange(desc(mean_price))
# Agrupar por tipo de motor y transmisión, y contar la cantidad de vehículos en cada grupo
df_vehiculos %>%
group_by(engine_type, transmission) %>%
summarise(count = n()) %>%
arrange(desc(count))
# Agrupar por año de producción y calcular el precio máximo de los vehículos de cada año
df_vehiculos %>%
group_by(year_produced) %>%
summarise(max_price = max(price_usd)) %>%
arrange(desc(max_price))
# Agrupar por color y calcular el conteo vehículos, los vehiculos encabezan los colores negro, silver y azul en manufactura
df_vehiculos %>%
group_by(color) %>%
summarise(count = n()) %>%
arrange(desc(count))
# Visualizamos la transmision de los vehiculos y observamos que el dataset tiene mas vehiculos con transmision mecanica
ggplot(df_vehiculos, aes(x = transmission)) +
geom_bar(fill = "darkgreen") +
labs(title = "Transmision de vehiculos")
# Visualizamos el tipo de motor de los vehiculos y observamos que el dataset tiene mas vehiculos con tipo de motor gasolina
ggplot(df_vehiculos, aes(x = engine_type)) +
geom_bar(fill = "darkgreen") +
labs(title = "Tipo de motor")
# obtenemos numero de colores
color_counts <- table(df_vehiculos$color)
# Crear la lista explode con 0 para todas las porciones excepto la primera.
num_colors <- length(color_counts)
explode <- c(0.1, rep(0, num_colors - 1))
suppressWarnings({
# visualizar el gráfico de pastel de los colores de los vehiculos, observamos que el color black encabeza el color de los vehiculos
pie(color_counts,
labels = names(color_counts),
autopct = "%1.2f%%",
explode = explode,
main = "Color de Vehiculos")
})
# Seleccionar las columnas numericas
numeric_df <- df_vehiculos[, sapply(df_vehiculos, is.numeric)]
# Calcular la matriz de correlacion
corr <- cor(numeric_df)
# graficando la correlación lineal entre las variables
# observamos que hay una alta correlacion entre el año de produccion del vehiculo (year_produced) y el precio (price_usd)
# tambien hay una correlacion negativa entre el valor de distancia recorrida (odometer_value) y el precio (price_usd)
heatmap(corr,
symm = TRUE,
col = colorRampPalette(c("yellow", "green", "blue"))(100),
main = "Correlation between features")
# visualizando boxplot de los precios
boxplot(price_usd ~ transmission,
data = df_vehiculos,
main = "Precio por transmission",
xlab = "Transmission",
ylab = "Price (USD)",col = "blue")
# calcular el conteo de vehiculos por fabricante
manufacturer_counts <- table(df_vehiculos$manufacturer_name)
# obtener el top 10 de fabricantes
top_10_manufacturers <- sort(manufacturer_counts, decreasing = TRUE)[1:10]
# Visualizando top 10 de cantidad de vehiculos por fabricante en el dataset
barplot(top_10_manufacturers,
main = "Vehiculos por fabricante",
xlab = "Fabricante",
ylab = "Cantidad de vehiculos",
col = "blue")
# Conclusiones
# Conclusiones
# La función py_run_string permitió ejecutar fragmentos de código Python directamente desde R, sin necesidad de scripts externos, lo que agilizó la integración entre ambos lenguajes.
# Conclusiones
# La función py_run_string permitió ejecutar fragmentos de código Python directamente desde R, sin necesidad de scripts externos, lo que agilizó la integración entre ambos lenguajes.
# Después de realizar las tareas iniciales de procesamiento en Python, los datos fueron transferidos a R mediante reticulate, lo que permitió una transición sin complicaciones entre ambos lenguajes para continuar el análisis en R.
